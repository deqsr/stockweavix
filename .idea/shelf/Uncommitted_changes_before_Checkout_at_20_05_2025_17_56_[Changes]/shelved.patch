Index: app/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flask import Flask\r\nfrom flask_migrate import Migrate\r\nfrom .config import Config\r\nfrom .models import db\r\nfrom .routes.inventory import inv_bp\r\nfrom .routes.main import main_bp\r\n\r\ndef create_app():\r\n    app = Flask(__name__)\r\n    app.config.from_object(Config)\r\n\r\n    # SQLAlchemy + міграції\r\n    db.init_app(app)\r\n    Migrate(app, db)\r\n\r\n    # ——— Прибрали цей глобальний маршрут ———\r\n    # @app.route('/')\r\n    # def index():\r\n    #     return render_template('index.html')\r\n\r\n    # Реєструємо blueprints\r\n    app.register_blueprint(inv_bp, url_prefix='/inventory')\r\n    app.register_blueprint(main_bp)\r\n\r\n    return app\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/__init__.py b/app/__init__.py
--- a/app/__init__.py	(revision 41c213432671009c12bd7e415c0670df82eb2968)
+++ b/app/__init__.py	(date 1747752954535)
@@ -13,12 +13,7 @@
     db.init_app(app)
     Migrate(app, db)
 
-    # ——— Прибрали цей глобальний маршрут ———
-    # @app.route('/')
-    # def index():
-    #     return render_template('index.html')
-
-    # Реєструємо blueprints
+    # blueprints
     app.register_blueprint(inv_bp, url_prefix='/inventory')
     app.register_blueprint(main_bp)
 
Index: app/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># app/models.py\r\n\r\nfrom flask_sqlalchemy import SQLAlchemy\r\nfrom datetime import datetime\r\n\r\n# Ініціалізуємо ORM\r\ndb = SQLAlchemy()\r\n\r\nclass Client(db.Model):\r\n    __tablename__ = 'Clients'\r\n    __table_args__ = {'schema': 'Belteh'}\r\n    ClientID      = db.Column(db.Integer, primary_key=True)\r\n    LastName      = db.Column(db.String(100), nullable=False)\r\n    FirstName     = db.Column(db.String(100), nullable=False)\r\n    MiddleName    = db.Column(db.String(100), nullable=True)\r\n    Phone         = db.Column(db.String(50), nullable=True)\r\n    Email         = db.Column(db.String(100), nullable=True)\r\n    Address       = db.Column(db.String(255), nullable=False)\r\n    CreatedDate   = db.Column(db.DateTime, default=datetime.utcnow)\r\n    LastUpdated   = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\r\n\r\n    orders = db.relationship('Order', back_populates='client')\r\n\r\nclass City(db.Model):\r\n    __tablename__ = 'Cities'\r\n    __table_args__ = {'schema': 'Belteh'}\r\n    CityID       = db.Column(db.Integer, primary_key=True)\r\n    CityName     = db.Column('CityName', db.String(100), unique=True, nullable=False)\r\n    CreatedDate  = db.Column(db.DateTime, default=datetime.utcnow)\r\n    LastUpdated  = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\r\n\r\n    # Зв'язок до замовлень\r\n    orders = db.relationship('Order', back_populates='city')\r\n\r\nclass Position(db.Model):\r\n    __tablename__ = 'Positions'\r\n    __table_args__ = {'schema': 'Belteh'}\r\n    PositionID   = db.Column(db.Integer, primary_key=True)\r\n    PositionName = db.Column(db.String(100), nullable=False)\r\n\r\n    employees = db.relationship('Employee', back_populates='position')\r\n\r\nclass Warehouse(db.Model):\r\n    __tablename__ = 'Warehouses'\r\n    __table_args__ = {'schema': 'Belteh'}\r\n    WarehouseID   = db.Column(db.Integer, primary_key=True)\r\n    WarehouseName = db.Column(db.String(150), nullable=False)\r\n    Description   = db.Column(db.String, nullable=True)\r\n    Address       = db.Column(db.String, nullable=True)\r\n    CreatedDate   = db.Column(db.DateTime, default=datetime.utcnow)\r\n    LastUpdated   = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\r\n\r\n    employees = db.relationship('Employee', back_populates='warehouse')\r\n    locations = db.relationship('Location', back_populates='warehouse')  # полиці/локації\r\n    zones = db.relationship('Zone', back_populates='warehouse')\r\n\r\nclass Employee(db.Model):\r\n    __tablename__ = 'Employees'\r\n    __table_args__ = {'schema': 'Belteh'}\r\n    EmployeeID        = db.Column(db.Integer, primary_key=True)\r\n    PositionID        = db.Column(db.Integer, db.ForeignKey('Belteh.Positions.PositionID'), nullable=False)\r\n    WarehouseID       = db.Column(db.Integer, db.ForeignKey('Belteh.Warehouses.WarehouseID'), nullable=False)\r\n    EmployeeLastName  = db.Column(db.String(100), nullable=False)\r\n    EmployeeFirstName = db.Column(db.String(100), nullable=False)\r\n    EmployeePatronymic = db.Column(db.String(100), nullable=True)\r\n    EmployeePassport  = db.Column(db.String(50), nullable=True)\r\n    EmployeePhone     = db.Column(db.String(50), nullable=True)\r\n    EmployeeEmail     = db.Column(db.String(100), nullable=True)\r\n    CreatedDate       = db.Column(db.DateTime, default=datetime.utcnow)\r\n    LastUpdated       = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\r\n\r\n    position  = db.relationship('Position', back_populates='employees')\r\n    warehouse = db.relationship('Warehouse', back_populates='employees')\r\n\r\nclass Zone(db.Model):\r\n    __tablename__ = 'Zones'\r\n    __table_args__ = {'schema': 'Belteh'}\r\n    ZoneID      = db.Column(db.Integer, primary_key=True)\r\n    ZoneCode    = db.Column(db.Integer, nullable=False)\r\n    ZoneName    = db.Column(db.String(100), nullable=False)\r\n    WarehouseID = db.Column(db.Integer, db.ForeignKey('Belteh.Warehouses.WarehouseID'), nullable=False)\r\n    RowMin      = db.Column(db.Integer, nullable=False)\r\n    RowMax      = db.Column(db.Integer, nullable=False)\r\n    Description = db.Column(db.String, nullable=True)\r\n    CreatedDate = db.Column(db.DateTime, default=datetime.utcnow)\r\n    LastUpdated = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\r\n\r\n    warehouse = db.relationship('Warehouse', back_populates='zones')\r\n    rows      = db.relationship('ZoneRow', back_populates='zone')\r\n\r\nclass ZoneRow(db.Model):\r\n    __tablename__ = 'ZoneRows'\r\n    __table_args__ = {'schema': 'Belteh'}\r\n    ZoneRowID = db.Column(db.Integer, primary_key=True)\r\n    ZoneID    = db.Column(db.Integer, db.ForeignKey('Belteh.Zones.ZoneID'), nullable=False)\r\n    RowNumber = db.Column(db.Integer, nullable=False)\r\n\r\n    zone  = db.relationship('Zone', back_populates='rows')\r\n    locations = db.relationship('Location', back_populates='row')\r\n\r\nclass Location(db.Model):\r\n    __tablename__ = 'Locations'\r\n    __table_args__ = {'schema': 'Belteh'}\r\n    LocationID      = db.Column(db.Integer, primary_key=True)\r\n    WarehouseID     = db.Column(db.Integer, db.ForeignKey('Belteh.Warehouses.WarehouseID'), nullable=True)\r\n    ZoneRowID       = db.Column(db.Integer, db.ForeignKey('Belteh.ZoneRows.ZoneRowID'), nullable=True)\r\n    SectionID       = db.Column(db.Integer, db.ForeignKey('Belteh.ZoneSections.SectionID'), nullable=True)\r\n    ShelfID         = db.Column(db.Integer, db.ForeignKey('Belteh.ZoneShelves.ShelfID'), nullable=True)\r\n    CreatedDate     = db.Column(db.DateTime, default=datetime.utcnow)\r\n    LastUpdatedDate = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\r\n\r\n    warehouse = db.relationship('Warehouse', back_populates='locations')\r\n    row       = db.relationship('ZoneRow', back_populates='locations')\r\n    section   = db.relationship('ZoneSection', back_populates='locations')\r\n    shelf     = db.relationship('ZoneShelf', back_populates='locations')\r\n    inventory_items = db.relationship('Inventory', back_populates='location')\r\n\r\nclass ZoneSection(db.Model):\r\n    __tablename__ = 'ZoneSections'\r\n    __table_args__ = {'schema': 'Belteh'}\r\n    SectionID     = db.Column(db.Integer, primary_key=True)\r\n    SectionNumber = db.Column(db.Integer, nullable=False)\r\n    locations     = db.relationship('Location', back_populates='section')\r\n\r\nclass ZoneShelf(db.Model):\r\n    __tablename__ = 'ZoneShelves'\r\n    __table_args__ = {'schema': 'Belteh'}\r\n    ShelfID     = db.Column(db.Integer, primary_key=True)\r\n    ShelfLevel  = db.Column(db.Integer, nullable=False)\r\n    locations   = db.relationship('Location', back_populates='shelf')\r\n\r\nclass Manufacturer(db.Model):\r\n    __tablename__ = 'Manufacturers'\r\n    __table_args__ = {'schema': 'Belteh'}\r\n    ManufacturerID          = db.Column(db.Integer, primary_key=True)\r\n    ManufacturerName        = db.Column(db.String(150), nullable=False)\r\n    ManufacturerDescription = db.Column(db.String, nullable=True)\r\n    CreatedDate             = db.Column(db.DateTime, default=datetime.utcnow)\r\n    LastUpdated             = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\r\n\r\n    products = db.relationship('Product', back_populates='manufacturer')\r\n\r\nclass ProductCategory(db.Model):\r\n    __tablename__ = 'ProductCategories'\r\n    __table_args__ = {'schema': 'Belteh'}\r\n    CategoryID    = db.Column(db.Integer, primary_key=True)\r\n    CategoryName  = db.Column(db.String(100), nullable=False)\r\n    Description   = db.Column(db.String, nullable=True)\r\n    CreatedDate   = db.Column(db.DateTime, default=datetime.utcnow)\r\n    LastUpdated   = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\r\n\r\n    products = db.relationship('Product', back_populates='category')\r\n\r\nclass Product(db.Model):\r\n    __tablename__ = 'Products'\r\n    __table_args__ = {'schema': 'Belteh'}\r\n    ProductID         = db.Column(db.Integer, primary_key=True)\r\n    ProductName       = db.Column(db.String(150), nullable=False)\r\n    ManufacturerID    = db.Column(db.Integer, db.ForeignKey('Belteh.Manufacturers.ManufacturerID'), nullable=True)\r\n    ProductCategoryID = db.Column(db.Integer, db.ForeignKey('Belteh.ProductCategories.CategoryID'), nullable=False)\r\n    ProductDescription= db.Column(db.String, nullable=True)\r\n    SKU               = db.Column(db.String(50), unique=True, nullable=False)\r\n    Price             = db.Column(db.Numeric, nullable=True)\r\n    CreatedDate       = db.Column(db.DateTime, default=datetime.utcnow)\r\n    LastUpdated       = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\r\n\r\n    manufacturer     = db.relationship('Manufacturer', back_populates='products')\r\n    category         = db.relationship('ProductCategory', back_populates='products')\r\n    inventory_items  = db.relationship('Inventory', back_populates='product')\r\n    order_items      = db.relationship('OrderItem', back_populates='product')\r\n    supply_details   = db.relationship('SupplyDetail', back_populates='product')\r\n\r\nclass Inventory(db.Model):\r\n    __tablename__ = 'Inventory'\r\n    __table_args__ = {'schema': 'Belteh'}\r\n    InventoryID  = db.Column(db.Integer, primary_key=True)\r\n    ProductID    = db.Column(db.Integer, db.ForeignKey('Belteh.Products.ProductID'), nullable=False)\r\n    LocationID   = db.Column(db.Integer, db.ForeignKey('Belteh.Locations.LocationID'), nullable=False)\r\n    Quantity     = db.Column(db.Integer, nullable=False)\r\n    LastUpdated  = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\r\n\r\n    product      = db.relationship('Product', back_populates='inventory_items')\r\n    location     = db.relationship('Location', back_populates='inventory_items')\r\n\r\nclass OrderStatus(db.Model):\r\n    __tablename__ = 'OrderStatuses'\r\n    __table_args__ = {'schema': 'Belteh'}\r\n    OrderStatusID = db.Column(db.Integer, primary_key=True)\r\n    StatusName    = db.Column(db.String(50), nullable=False)\r\n\r\n    orders = db.relationship('Order', back_populates='status')\r\n\r\nclass Order(db.Model):\r\n    __tablename__ = 'Orders'\r\n    __table_args__ = {'schema': 'Belteh'}\r\n    OrderID       = db.Column(db.Integer, primary_key=True)\r\n    ClientID      = db.Column(db.Integer, db.ForeignKey('Belteh.Clients.ClientID'), nullable=True)\r\n    CityID        = db.Column(db.Integer, db.ForeignKey('Belteh.Cities.CityID'), nullable=True)\r\n    OrderDate     = db.Column(db.Date, nullable=False)\r\n    PaymentDate   = db.Column(db.Date, nullable=True)\r\n    Address = db.Column(db.String(255), nullable=True)\r\n    OrderStatusID = db.Column(db.Integer, db.ForeignKey('Belteh.OrderStatuses.OrderStatusID'), nullable=False)\r\n    Description = db.Column(db.String, nullable=True)\r\n    CreatedDate   = db.Column(db.DateTime, default=datetime.utcnow)\r\n    LastUpdated   = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\r\n    client        = db.relationship('Client', back_populates='orders')\r\n    city          = db.relationship('City', back_populates='orders')\r\n    status        = db.relationship('OrderStatus', back_populates='orders')\r\n    items         = db.relationship('OrderItem', back_populates='order')\r\n\r\nclass OrderItem(db.Model):\r\n    __tablename__ = 'OrderItems'\r\n    __table_args__ = {'schema': 'Belteh'}\r\n    OrderItemID = db.Column(db.Integer, primary_key=True)\r\n    OrderID     = db.Column(db.Integer, db.ForeignKey('Belteh.Orders.OrderID'), nullable=False)\r\n    ProductID   = db.Column(db.Integer, db.ForeignKey('Belteh.Products.ProductID'), nullable=False)\r\n    Quantity    = db.Column(db.Integer, nullable=False)\r\n    UnitPrice   = db.Column(db.Numeric, nullable=False)\r\n\r\n    order       = db.relationship('Order', back_populates='items')\r\n    product     = db.relationship('Product', back_populates='order_items')\r\n\r\nclass Supplier(db.Model):\r\n    __tablename__ = 'Suppliers'\r\n    __table_args__ = {'schema': 'Belteh'}\r\n    SupplierID     = db.Column(db.Integer, primary_key=True)\r\n    SupplierName   = db.Column(db.String(150), nullable=False)\r\n    SupplierAddress= db.Column(db.String, nullable=True)\r\n    SupplierPhone  = db.Column(db.String(50), nullable=True)\r\n    SupplierEDRPOU = db.Column(db.String(50), nullable=True)\r\n    SupplierMFI    = db.Column(db.String(50), nullable=True)\r\n    ContactPerson  = db.Column(db.String(100), nullable=True)\r\n    CreatedDate    = db.Column(db.DateTime, default=datetime.utcnow)\r\n    LastUpdated    = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\r\n\r\n    contracts      = db.relationship('SupplyContracts', back_populates='supplier')\r\n\r\nclass SupplyStatus(db.Model):\r\n    __tablename__ = 'SupplyStatuses'\r\n    __table_args__ = {'schema': 'Belteh'}\r\n    SupplyStatusID= db.Column(db.Integer, primary_key=True)\r\n    StatusName    = db.Column(db.String(50), nullable=False)\r\n\r\n    contracts     = db.relationship('SupplyContracts', back_populates='status')\r\n\r\nclass SupplyContracts(db.Model):\r\n    __tablename__ = 'SupplyContracts'\r\n    __table_args__ = {'schema': 'Belteh'}\r\n    SupplyID        = db.Column(db.Integer, primary_key=True)\r\n    SupplierID      = db.Column(db.Integer, db.ForeignKey('Belteh.Suppliers.SupplierID'), nullable=False)\r\n    ContractPrice   = db.Column(db.Numeric, nullable=True)\r\n    PaymentDate     = db.Column(db.Date, nullable=True)\r\n    SupplyStatusID  = db.Column(db.Integer, db.ForeignKey('Belteh.SupplyStatuses.SupplyStatusID'), nullable=False)\r\n    Description     = db.Column(db.String, nullable=True)\r\n    CreatedDate     = db.Column(db.DateTime, default=datetime.utcnow)\r\n    LastUpdated     = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\r\n\r\n    supplier        = db.relationship('Supplier', back_populates='contracts')\r\n    status          = db.relationship('SupplyStatus', back_populates='contracts')\r\n    details         = db.relationship('SupplyDetail', back_populates='contract')\r\n\r\nclass SupplyDetail(db.Model):\r\n    __tablename__ = 'SupplyDetails'\r\n    __table_args__ = {'schema': 'Belteh'}\r\n    SupplyDetailID = db.Column(db.Integer, primary_key=True)\r\n    SupplyID       = db.Column(db.Integer, db.ForeignKey('Belteh.SupplyContracts.SupplyID'), nullable=False)\r\n    ProductID      = db.Column(db.Integer, db.ForeignKey('Belteh.Products.ProductID'), nullable=False)\r\n    Quantity       = db.Column(db.Integer, nullable=False)\r\n    UnitPrice      = db.Column(db.Numeric, nullable=True)\r\n\r\n    contract = db.relationship('SupplyContracts', back_populates='details')\r\n    product  = db.relationship('Product', back_populates='supply_details')\r\n\r\n# внизу app/models.py\r\nclass LocationStatusView(db.Model):\r\n    __tablename__ = 'vw_LocationStatus'\r\n    __table_args__ = {'schema': 'Belteh', 'extend_existing': True}\r\n\r\n    LocationID    = db.Column(db.Integer, primary_key=True)\r\n    ZoneCode      = db.Column(db.Integer)\r\n    RowNumber     = db.Column(db.Integer)\r\n    SectionNumber = db.Column(db.Integer)\r\n    ShelfLevel    = db.Column(db.Integer)\r\n    TotalQuantity = db.Column(db.Integer)\r\n    ShelfStatus   = db.Column(db.String)\r\n\r\n    def __repr__(self):\r\n        return (\r\n            f\"<LocationStatusView \"\r\n            f\"{self.LocationID=} Zone={self.ZoneCode} Row={self.RowNumber} \"\r\n            f\"Shelf={self.ShelfLevel} Qty={self.TotalQuantity} Status={self.ShelfStatus}>\"\r\n        )\r\n\r\nclass ZoneOccupancyView(db.Model):\r\n    __tablename__ = 'ZoneOccupancyView'\r\n    __table_args__ = {'schema': 'Belteh'}\r\n\r\n    ZoneID = db.Column(db.Integer, primary_key=True)\r\n    TotalLocations = db.Column(db.Integer)\r\n    OccupiedLocations = db.Column(db.Integer)\r\n    OccupancyPercentage = db.Column(db.Float)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/models.py b/app/models.py
--- a/app/models.py	(revision 41c213432671009c12bd7e415c0670df82eb2968)
+++ b/app/models.py	(date 1747752954529)
@@ -3,7 +3,7 @@
 from flask_sqlalchemy import SQLAlchemy
 from datetime import datetime
 
-# Ініціалізуємо ORM
+
 db = SQLAlchemy()
 
 class Client(db.Model):
@@ -29,7 +29,6 @@
     CreatedDate  = db.Column(db.DateTime, default=datetime.utcnow)
     LastUpdated  = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
 
-    # Зв'язок до замовлень
     orders = db.relationship('Order', back_populates='city')
 
 class Position(db.Model):
@@ -271,7 +270,7 @@
     contract = db.relationship('SupplyContracts', back_populates='details')
     product  = db.relationship('Product', back_populates='supply_details')
 
-# внизу app/models.py
+
 class LocationStatusView(db.Model):
     __tablename__ = 'vw_LocationStatus'
     __table_args__ = {'schema': 'Belteh', 'extend_existing': True}
Index: app/routes/main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flask import Blueprint, render_template\r\nfrom sqlalchemy import func, desc\r\nfrom datetime import datetime, timedelta\r\nfrom dateutil.relativedelta import relativedelta\r\n\r\nfrom app.models import (\r\n    db,\r\n    Order,\r\n    OrderItem,\r\n    SupplyContracts,\r\n    City,\r\n    Zone,\r\n    ZoneOccupancyView\r\n)\r\n\r\nmain_bp = Blueprint('main', __name__)\r\n\r\n@main_bp.route('/')\r\ndef dashboard():\r\n    today = datetime.utcnow().date()\r\n\r\n    # 1) Періоди для KPI: поточний і попередній місяць\r\n    start_current = today - relativedelta(months=1)\r\n    start_prev    = start_current - relativedelta(months=1)\r\n    end_prev      = start_current\r\n\r\n    # 2) Нові замовлення і ріст\r\n    curr_orders = db.session.query(func.count(Order.OrderID)) \\\r\n        .filter(Order.OrderDate >= start_current) \\\r\n        .scalar() or 0\r\n    prev_orders = db.session.query(func.count(Order.OrderID)) \\\r\n        .filter(Order.OrderDate >= start_prev,\r\n                Order.OrderDate < end_prev) \\\r\n        .scalar() or 0\r\n    order_growth = (curr_orders - prev_orders) / prev_orders * 100 if prev_orders else None\r\n\r\n    # 3) Продажі за місяць і ріст\r\n    curr_sales = db.session.query(\r\n        func.coalesce(func.sum(OrderItem.UnitPrice * OrderItem.Quantity), 0)\r\n    ) \\\r\n    .join(Order, Order.OrderID == OrderItem.OrderID) \\\r\n    .filter(Order.OrderDate >= start_current) \\\r\n    .scalar() or 0\r\n    prev_sales = db.session.query(\r\n        func.coalesce(func.sum(OrderItem.UnitPrice * OrderItem.Quantity), 0)\r\n    ) \\\r\n    .join(Order, Order.OrderID == OrderItem.OrderID) \\\r\n    .filter(Order.OrderDate >= start_prev,\r\n            Order.OrderDate < end_prev) \\\r\n    .scalar() or 0\r\n    sales_growth = (curr_sales - prev_sales) / prev_sales * 100 if prev_sales else None\r\n\r\n    # 4) Загальна кількість замовлень\r\n    total_orders = db.session.query(func.count(Order.OrderID)).scalar() or 0\r\n\r\n    # 5) Останні 7 поставок із Δ%\r\n    supplies_raw = (\r\n        db.session.query(\r\n            SupplyContracts.SupplyID,\r\n            SupplyContracts.CreatedDate,\r\n            SupplyContracts.ContractPrice,\r\n            SupplyContracts.SupplierID\r\n        )\r\n        .order_by(SupplyContracts.CreatedDate.desc())\r\n        .limit(7)\r\n        .all()\r\n    )\r\n    supplies = []\r\n    for s in supplies_raw:\r\n        status = SupplyContracts.query.get(s.SupplyID).status.StatusName\r\n        prev = (\r\n            db.session.query(SupplyContracts.ContractPrice)\r\n            .filter(\r\n                SupplyContracts.SupplierID == s.SupplierID,\r\n                SupplyContracts.SupplyID < s.SupplyID\r\n            )\r\n            .order_by(SupplyContracts.SupplyID.desc())\r\n            .first()\r\n        )\r\n        prev_price = prev[0] if prev else None\r\n        pct = round((s.ContractPrice - prev_price) / prev_price * 100) if prev_price else None\r\n        supplies.append({\r\n            'id':     s.SupplyID,\r\n            'date':   s.CreatedDate.strftime('%d-%m-%Y'),\r\n            'status': status,\r\n            'change': f\"{pct}%\" if pct is not None else '—'\r\n        })\r\n\r\n    # 6) Завантаженість зон (до 7) через ZoneOccupancyView + Zone.ZoneCode\r\n    zone_stats = (\r\n        db.session.query(\r\n            Zone.ZoneCode.label('zone'),\r\n            ZoneOccupancyView.TotalLocations.label('total_loc'),\r\n            ZoneOccupancyView.OccupiedLocations.label('occ_loc'),\r\n            ZoneOccupancyView.OccupancyPercentage.label('pct')\r\n        )\r\n        .join(Zone, Zone.ZoneID == ZoneOccupancyView.ZoneID)\r\n        .order_by(Zone.ZoneCode)\r\n        .limit(7)\r\n        .all()\r\n    )\r\n    zones = []\r\n    for z in zone_stats:\r\n        zones.append({\r\n            'zone':     z.zone,\r\n            'status':   f\"{z.occ_loc} / {z.total_loc}\",\r\n            'quantity': z.occ_loc,\r\n            'used_pct': f\"{z.pct:.2f}%\"\r\n        })\r\n\r\n    # 7) Дані для графіка продажів за останні 30 днів\r\n    start_30 = today - timedelta(days=30)\r\n    sales_by_day = (\r\n        db.session.query(\r\n            Order.OrderDate,\r\n            func.coalesce(func.sum(OrderItem.UnitPrice * OrderItem.Quantity), 0)\r\n                .label('daily_sum')\r\n        )\r\n        .join(OrderItem, Order.OrderID == OrderItem.OrderID)\r\n        .filter(Order.OrderDate >= start_30)\r\n        .group_by(Order.OrderDate)\r\n        .order_by(Order.OrderDate)\r\n        .all()\r\n    )\r\n    chart_labels = [row.OrderDate.strftime('%d-%m') for row in sales_by_day]\r\n    chart_values = [float(row.daily_sum) for row in sales_by_day]\r\n\r\n    # 8) Топ-5 міст за рік з Δ%\r\n    one_year = today - relativedelta(years=1)\r\n    curr_city = (\r\n        db.session.query(City.CityName, func.count(Order.OrderID).label('cnt'))\r\n        .join(Order, Order.CityID == City.CityID)\r\n        .filter(Order.OrderDate >= one_year)\r\n        .group_by(City.CityName)\r\n        .order_by(desc('cnt'))\r\n        .limit(10)\r\n        .all()\r\n    )\r\n    prev_city = (\r\n        db.session.query(City.CityName, func.count(Order.OrderID).label('cnt'))\r\n        .join(Order, Order.CityID == City.CityID)\r\n        .filter(Order.OrderDate >= one_year - relativedelta(years=1),\r\n                Order.OrderDate < one_year)\r\n        .group_by(City.CityName)\r\n        .all()\r\n    )\r\n    prev_map = {name: cnt for name, cnt in prev_city}\r\n    top_cities = []\r\n    for name, cnt in curr_city:\r\n        prev_cnt = prev_map.get(name, 0)\r\n        pct = round((cnt - prev_cnt) / prev_cnt * 100) if prev_cnt else None\r\n        top_cities.append({\r\n            'city': name,\r\n            'cnt': cnt,\r\n            'change': f\"{pct}%\" if pct is not None else '—'\r\n        })\r\n\r\n    # Перенести return ось сюди, поза циклом!\r\n    return render_template('index.html',\r\n                           new_orders=curr_orders,\r\n                           order_growth=f\"{round(order_growth)}%\" if order_growth is not None else '—',\r\n                           total_sales=round(curr_sales, 2),\r\n                           sales_growth=f\"{round(sales_growth)}%\" if sales_growth is not None else '—',\r\n                           total_orders=total_orders,\r\n                           supplies=supplies,\r\n                           zones=zones,\r\n                           chart_labels=chart_labels,\r\n                           chart_values=chart_values,\r\n                           top_cities=top_cities\r\n                           )
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/routes/main.py b/app/routes/main.py
--- a/app/routes/main.py	(revision 41c213432671009c12bd7e415c0670df82eb2968)
+++ b/app/routes/main.py	(date 1747752954512)
@@ -155,7 +155,6 @@
             'change': f"{pct}%" if pct is not None else '—'
         })
 
-    # Перенести return ось сюди, поза циклом!
     return render_template('index.html',
                            new_orders=curr_orders,
                            order_growth=f"{round(order_growth)}%" if order_growth is not None else '—',
Index: app/routes/inventory.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># app/routes/inventory.py\r\n\r\nfrom flask import Blueprint, render_template, request\r\nfrom app.models import Inventory, Product, ProductCategory\r\n\r\n\r\ninv_bp = Blueprint('inventory', __name__)\r\n\r\n@inv_bp.route('/', methods=['GET'])\r\ndef list_inventory():\r\n    cat_id = request.args.get('category', type=int)\r\n    categories = ProductCategory.query.order_by(ProductCategory.CategoryName).all()\r\n\r\n    # Базовий запит — приєднуємо таблицю Products\r\n    query = Inventory.query.join(Product, Inventory.ProductID == Product.ProductID)\r\n\r\n    # Якщо в URL передано category, ставимо WHERE\r\n    if cat_id:\r\n        query = query.filter(Product.ProductCategoryID == cat_id)\r\n\r\n    items = query.all()\r\n\r\n    return render_template(\r\n        'inventory_list.html',\r\n        items=items,\r\n        categories=categories,\r\n        selected_category=cat_id\r\n    )\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/routes/inventory.py b/app/routes/inventory.py
--- a/app/routes/inventory.py	(revision 41c213432671009c12bd7e415c0670df82eb2968)
+++ b/app/routes/inventory.py	(date 1747752954495)
@@ -1,5 +1,3 @@
-# app/routes/inventory.py
-
 from flask import Blueprint, render_template, request
 from app.models import Inventory, Product, ProductCategory
 
@@ -11,10 +9,8 @@
     cat_id = request.args.get('category', type=int)
     categories = ProductCategory.query.order_by(ProductCategory.CategoryName).all()
 
-    # Базовий запит — приєднуємо таблицю Products
     query = Inventory.query.join(Product, Inventory.ProductID == Product.ProductID)
 
-    # Якщо в URL передано category, ставимо WHERE
     if cat_id:
         query = query.filter(Product.ProductCategoryID == cat_id)
 
Index: run.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># run.py\r\n\r\nfrom app import create_app\r\n\r\napp = create_app()\r\n\r\nif __name__ == '__main__':\r\n    app.run(debug=True)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/run.py b/run.py
--- a/run.py	(revision 41c213432671009c12bd7e415c0670df82eb2968)
+++ b/run.py	(date 1747752954520)
@@ -1,5 +1,3 @@
-# run.py
-
 from app import create_app
 
 app = create_app()
Index: app/templates/layout.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!doctype html>\r\n<html lang=\"uk\">\r\n<head>\r\n  <meta charset=\"utf-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n  <title>{% block title %}StockWeavix{% endblock %}</title>\r\n  <!-- Bootstrap CSS -->\r\n  <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n  <!-- Custom styles -->\r\n  <style>\r\n    /* Отступ для тела, чтобы не перекрывалось фиксированным навбаром */\r\n    body {\r\n      padding-top: 56px;\r\n    }\r\n    /* Стили бокового меню */\r\n    .sidebar {\r\n      width: 250px;\r\n      position: fixed;\r\n      top: 56px;\r\n      bottom: 0;\r\n      left: 0;\r\n      padding: 1rem;\r\n      background-color: #f8f9fa;\r\n    }\r\n    /* Отступ содержимого страницы, учитывая ширину сайдбара */\r\n    .content-wrapper {\r\n      margin-left: 250px;\r\n      padding: 1rem;\r\n    }\r\n    /* Стили для карточек на дашборде */\r\n    .card-dashboard {\r\n      border-radius: 0.75rem;\r\n      box-shadow: 0 0.125rem 0.25rem rgba(0,0,0,0.075);\r\n    }\r\n    /* Профессиональное выравнивание левого отступа логотипа навбара\r\n       чтобы совпадать с контентом справа и сайдбаром */\r\n    .navbar {\r\n      padding-left: calc(1.2rem);\r\n    }\r\n    /* Убираем стандартный отступ у .navbar-brand, теперь он будет идти вровень с контентом */\r\n    .navbar-brand {\r\n      margin: 0;\r\n    }\r\n  </style>\r\n</head>\r\n<body>\r\n  <!-- Navbar -->\r\n  <nav class=\"navbar navbar-expand-lg navbar-light bg-light fixed-top\">\r\n    <div class=\"container-fluid\">\r\n      <a class=\"navbar-brand\" href=\"#\">StockWeavix</a>\r\n      <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\">\r\n        <span class=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n        <ul class=\"navbar-nav ms-auto\">\r\n          <li class=\"nav-item\"><a class=\"nav-link\" href=\"/\">Головна</a></li>\r\n          <li class=\"nav-item\"><a class=\"nav-link\" href=\"/inventory\">Товари</a></li>\r\n          <li class=\"nav-item\"><a class=\"nav-link\" href=\"#\">Допомога</a></li>\r\n        </ul>\r\n        <form class=\"d-flex ms-3\">\r\n          <input class=\"form-control\" type=\"search\" placeholder=\"Пошук\">\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n\r\n  <!-- Sidebar -->\r\n  <div class=\"sidebar\">\r\n    <ul class=\"nav flex-column\">\r\n      <li class=\"nav-item\"><a class=\"nav-link active\" href=\"/\">Головна</a></li>\r\n      <li class=\"nav-item\"><a class=\"nav-link\" href=\"/inventory\">Товари на складі</a></li>\r\n      <li class=\"nav-item\"><a class=\"nav-link\" href=\"#\">Постачання</a></li>\r\n    </ul>\r\n  </div>\r\n\r\n  <!-- Page Content -->\r\n  <div class=\"content-wrapper\">\r\n    {% block content %}{% endblock %}\r\n  </div>\r\n\r\n  <!-- Bootstrap JS -->\r\n  <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/templates/layout.html b/app/templates/layout.html
--- a/app/templates/layout.html	(revision 41c213432671009c12bd7e415c0670df82eb2968)
+++ b/app/templates/layout.html	(date 1747752954502)
@@ -4,11 +4,9 @@
   <meta charset="utf-8">
   <meta name="viewport" content="width=device-width, initial-scale=1">
   <title>{% block title %}StockWeavix{% endblock %}</title>
-  <!-- Bootstrap CSS -->
   <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
-  <!-- Custom styles -->
   <style>
-    /* Отступ для тела, чтобы не перекрывалось фиксированным навбаром */
+
     body {
       padding-top: 56px;
     }
@@ -22,22 +20,20 @@
       padding: 1rem;
       background-color: #f8f9fa;
     }
-    /* Отступ содержимого страницы, учитывая ширину сайдбара */
+
     .content-wrapper {
       margin-left: 250px;
       padding: 1rem;
     }
-    /* Стили для карточек на дашборде */
     .card-dashboard {
       border-radius: 0.75rem;
       box-shadow: 0 0.125rem 0.25rem rgba(0,0,0,0.075);
     }
-    /* Профессиональное выравнивание левого отступа логотипа навбара
-       чтобы совпадать с контентом справа и сайдбаром */
+
     .navbar {
       padding-left: calc(1.2rem);
     }
-    /* Убираем стандартный отступ у .navbar-brand, теперь он будет идти вровень с контентом */
+
     .navbar-brand {
       margin: 0;
     }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"b12f38c3-9ad2-4a12-ad6f-3396ff62d0f2\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.env\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.env\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/dbnavigator.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/dbnavigator.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/stockweavix.iml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/stockweavix.iml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/__init__.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/__init__.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/config.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/config.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/models.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/models.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/routes/inventory.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/routes/inventory.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/routes/main.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/routes/main.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/templates/category_form.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/templates/category_form.html\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/templates/index.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/templates/index.html\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/templates/inventory.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/templates/inventory.html\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/templates/inventory_list.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/templates/inventory_list.html\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/templates/layout.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/templates/layout.html\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/requirements.txt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/requirements.txt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/run.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/run.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Flask Main\" />\r\n        <option value=\"Python Script\" />\r\n        <option value=\"CSS File\" />\r\n        <option value=\"HTML File\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"FlaskConsoleOptions\" custom-start-script=\"import sys; print('Python %s on %s' % (sys.version, sys.platform)); sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo, NoAppException&#10;for module in [&quot;main.py&quot;, &quot;wsgi.py&quot;, &quot;app.py&quot;]:&#10;    try: locals().update(ScriptInfo(app_import_path=module, create_app=None).load_app().make_shell_context()); print(&quot;\\nFlask App: %s&quot; % app.import_name); break&#10;    except NoAppException: pass\">\r\n    <envs>\r\n      <env key=\"FLASK_APP\" value=\"app\" />\r\n    </envs>\r\n    <option name=\"myCustomStartScript\" value=\"import sys; print('Python %s on %s' % (sys.version, sys.platform)); sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo, NoAppException&#10;for module in [&quot;main.py&quot;, &quot;wsgi.py&quot;, &quot;app.py&quot;]:&#10;    try: locals().update(ScriptInfo(app_import_path=module, create_app=None).load_app().make_shell_context()); print(&quot;\\nFlask App: %s&quot; % app.import_name); break&#10;    except NoAppException: pass\" />\r\n    <option name=\"myEnvs\">\r\n      <map>\r\n        <entry key=\"FLASK_APP\" value=\"app\" />\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"master\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GithubPullRequestsUISettings\"><![CDATA[{\r\n  \"selectedUrlAndAccountId\": {\r\n    \"url\": \"https://github.com/deqsr/stockweavix.git\",\r\n    \"accountId\": \"18402b41-11e6-4732-8d9f-9b14bb275e06\"\r\n  }\r\n}]]></component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 2\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2xLpdRiwUVPWYGylLElrfdNIoOf\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"DefaultHtmlFileTemplate\": \"HTML File\",\r\n    \"Flask server.Flask (run.py).executor\": \"Run\",\r\n    \"Flask server.stockweavix.executor\": \"Run\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"RunOnceActivity.git.unshallow\": \"true\",\r\n    \"git-widget-placeholder\": \"dev\",\r\n    \"list.type.of.created.stylesheet\": \"CSS\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  },\r\n  \"keyToStringList\": {\r\n    \"DatabaseDriversLRU\": [\r\n      \"sqlserver.localdb\",\r\n      \"sqlserver\"\r\n    ]\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\danii\\PycharmProjects\\stockweavix\\app\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Flask server.Flask (run.py)\">\r\n    <configuration name=\"Flask (run.py)\" type=\"Python.FlaskServer\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"stockweavix\" />\r\n      <option name=\"target\" value=\"$PROJECT_DIR$/run.py\" />\r\n      <option name=\"targetType\" value=\"PATH\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"launchJavascriptDebuger\" value=\"false\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"stockweavix\" type=\"Python.FlaskServer\">\r\n      <module name=\"stockweavix\" />\r\n      <option name=\"target\" value=\"$PROJECT_DIR$/run.py\" />\r\n      <option name=\"targetType\" value=\"PATH\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"launchJavascriptDebuger\" value=\"false\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Flask server.Flask (run.py)\" />\r\n        <item itemvalue=\"Flask server.Flask (run.py)\" />\r\n        <item itemvalue=\"Flask server.Flask (run.py)\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-76f8388c3a79-JavaScript-PY-243.24978.54\" />\r\n        <option value=\"bundled-python-sdk-91e3b7efe1d4-466328ff949b-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-243.24978.54\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"b12f38c3-9ad2-4a12-ad6f-3396ff62d0f2\" name=\"Changes\" comment=\"\" />\r\n      <created>1747727294527</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1747727294527</updated>\r\n      <workItem from=\"1747727295599\" duration=\"601000\" />\r\n      <workItem from=\"1747727915297\" duration=\"1331000\" />\r\n      <workItem from=\"1747729269449\" duration=\"17607000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/stockweavix$stockweavix.coverage\" NAME=\"stockweavix Coverage Results\" MODIFIED=\"1747740274314\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/stockweavix$Flask__run_py_.coverage\" NAME=\"Flask (run.py) Coverage Results\" MODIFIED=\"1747744738487\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 41c213432671009c12bd7e415c0670df82eb2968)
+++ b/.idea/workspace.xml	(date 1747752954855)
@@ -4,22 +4,12 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="b12f38c3-9ad2-4a12-ad6f-3396ff62d0f2" name="Changes" comment="">
-      <change beforePath="$PROJECT_DIR$/.env" beforeDir="false" afterPath="$PROJECT_DIR$/.env" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/dbnavigator.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/dbnavigator.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/stockweavix.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/stockweavix.iml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+    <list default="true" id="b12f38c3-9ad2-4a12-ad6f-3396ff62d0f2" name="Changes" comment="dev">
       <change beforePath="$PROJECT_DIR$/app/__init__.py" beforeDir="false" afterPath="$PROJECT_DIR$/app/__init__.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/app/config.py" beforeDir="false" afterPath="$PROJECT_DIR$/app/config.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app/models.py" beforeDir="false" afterPath="$PROJECT_DIR$/app/models.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app/routes/inventory.py" beforeDir="false" afterPath="$PROJECT_DIR$/app/routes/inventory.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app/routes/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/app/routes/main.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/app/templates/category_form.html" beforeDir="false" afterPath="$PROJECT_DIR$/app/templates/category_form.html" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/app/templates/index.html" beforeDir="false" afterPath="$PROJECT_DIR$/app/templates/index.html" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/app/templates/inventory.html" beforeDir="false" afterPath="$PROJECT_DIR$/app/templates/inventory.html" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/app/templates/inventory_list.html" beforeDir="false" afterPath="$PROJECT_DIR$/app/templates/inventory_list.html" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app/templates/layout.html" beforeDir="false" afterPath="$PROJECT_DIR$/app/templates/layout.html" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/requirements.txt" beforeDir="false" afterPath="$PROJECT_DIR$/requirements.txt" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/run.py" beforeDir="false" afterPath="$PROJECT_DIR$/run.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -56,6 +46,12 @@
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
+  <component name="GitHubPullRequestSearchHistory"><![CDATA[{
+  "lastFilter": {
+    "state": "OPEN",
+    "assignee": "deqsr"
+  }
+}]]></component>
   <component name="GithubPullRequestsUISettings"><![CDATA[{
   "selectedUrlAndAccountId": {
     "url": "https://github.com/deqsr/stockweavix.git",
@@ -161,12 +157,25 @@
       <updated>1747727294527</updated>
       <workItem from="1747727295599" duration="601000" />
       <workItem from="1747727915297" duration="1331000" />
-      <workItem from="1747729269449" duration="17607000" />
+      <workItem from="1747729269449" duration="17937000" />
     </task>
+    <task id="LOCAL-00001" summary="dev">
+      <option name="closed" value="true" />
+      <created>1747752636773</created>
+      <option name="number" value="00001" />
+      <option name="presentableId" value="LOCAL-00001" />
+      <option name="project" value="LOCAL" />
+      <updated>1747752636773</updated>
+    </task>
+    <option name="localTasksCounter" value="2" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
     <option name="version" value="3" />
+  </component>
+  <component name="VcsManagerConfiguration">
+    <MESSAGE value="dev" />
+    <option name="LAST_COMMIT_MESSAGE" value="dev" />
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
     <SUITE FILE_PATH="coverage/stockweavix$stockweavix.coverage" NAME="stockweavix Coverage Results" MODIFIED="1747740274314" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
